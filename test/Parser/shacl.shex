PREFIX sh: <http://www.w3.org/ns/shacl/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

 %ps{ this.S = new RDF.Schema(); %}

start=sh:ShapeShape
sh:ShapeShape {
  a (sh:Shape)?,
  (  sh:property        @sh:PropertyShape
   | sh:inverseProperty @sh:InversePropertyShape
   | sh:choice          @sh:ShapeShape
   | sh:propertyGroup   @sh:ShapeShape)*
  %ps{
    var conjuncts = _.map(function (r) { return r.$; });
    var ret = new RDF.AndRule(conjuncts);
    $$ = this.S.add(valRes.r.matches[0].triple.s, ret);
  %}
}

sh:PropertyShape {
  a (sh:PropertyShape)?,
  sh:predicate IRI         %ps{ $$ = new RDF.NameTerm(_.o); %},
  (  sh:allowedValue .+    %ps{ $$ = new RDF.ValueSet(_list); %}
   | sh:valueShape IRI     %ps{ $$ = new RDF.ValueReference(_.o); %}
   | sh:valueType IRI      %ps{ $$ = new RDF.ValueType(_.o); %}
   | sh:nodeType IRI       %ps{ $$ = new RDF.ValueType(_.o); %}
  )
  %ps{
    var disjuncts = _.map(function (r) { return r.$; });
    $$ = new RDF.OrRule(disjuncts);
  %},
  sh:minCount xsd:integer?,
  sh:maxCount xsd:integer?
} %ps{
  $$ = 
    new RDF.AtomicRule(false, false, false, $1, $2, parseInt($3.lex), $4 ? parseInt($4.lex) : undefined, {});
 %}

sh:InversePropertyShape {
  a (sh:InversePropertyShape)?,
  sh:predicate IRI         %ps{ $$ = new RDF.NameTerm(_.o) %},
  (  sh:allowedValue .+    %ps{ $$ = new RDF.ValueSet(_list); %}
   | sh:valueShape IRI     %ps{ $$ = new RDF.ValueReference(_.o); %}
   | sh:nodeType IRI       %ps{ $$ = new RDF.ValueType(_.o); %}
  ),
  sh:minCount xsd:integer?,
  sh:maxCount xsd:integer?
} %ps{
  $$ =
    new RDF.AtomicRule(false, true, false, $1, $2, parseInt($3.lex), $4 ? parseInt($4.lex) : undefined);
%}
